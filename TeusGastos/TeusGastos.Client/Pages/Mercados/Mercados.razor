@page "/mercados"
@using TeusGastos.Client.ViewModels
@using TeusGastos.Shared.Entidades
@using TeusGastos.Shared.Servicos.MercadoServico
@inject IMercadoServico MercadoServico
@inject IDialogService DialogService

<CustomPageTitle Title="Mercados"></CustomPageTitle>

<MudButton Variant="Variant.Filled"
           Color="Color.Info"
           DropShadow="false"
           Class="mb-3"
           StartIcon="@Icons.Material.Filled.Add"
           IconSize="Size.Large"
           @onclick="() => OpenDialogAsync(0)">Adicionar
</MudButton>

<MudTable @ref="table"
          Hover="true"
          Breakpoint="Breakpoint.Sm"
          ServerData="LoadServerData"
          Loading="@_loading"
          LoadingProgressColor="Color.Info"
          CurrentPage="@pagina"
          RowsPerPage="@linhasPorPagina">
    <ToolBarContent>
        <MudText Typo="Typo.h5">
            <MudIcon Icon="@Icons.Material.Filled.Store"></MudIcon>
            Mercados
        </MudText>
        <MudSpacer/>
        <MudTextField T="string" ValueChanged="@(s => Pesquisar(s))" Placeholder="Pesquisar" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="Id" T="Mercado">Id</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortLabel="Nome" T="Mercado">Nome
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Endereco" T="Mercado">Endereço</MudTableSortLabel>
        </MudTh>
        <MudTh>Ações</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Nome">@context.Nome</MudTd>
        <MudTd DataLabel="Endereco">@context.Endereco</MudTd>
        <MudTd>
            <MudButton Color="Color.Warning" Variant="Variant.Filled" Size="Size.Small"
                       StartIcon="@Icons.Material.Filled.Edit" IconSize="Size.Small"
                       DropShadow="false"
                       OnClick="async () => await OpenDialogAsync(context.Id)">Editar
            </MudButton>
            &ensp;
            <MudButton Color="Color.Error" Variant="Variant.Filled" Size="Size.Small"
                       StartIcon="@Icons.Material.Filled.Delete" IconSize="Size.Small"
                       DropShadow="false"
                       OnClick="() => Excluir(context.Id)">Excluir
            </MudButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        Nenhum registro encontrado.
    </NoRecordsContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new[] { 3, 5, 10, 25, 50, 100 }"
                       RowsPerPageString="@RowsPerPageString"
                       InfoFormat="@InfoFormat"
                       AllItemsText="@AllItemsText"/>
    </PagerContent>
</MudTable>

@code {
    private bool _loading;
    private const string RowsPerPageString = "Linhas por página";
    private const string InfoFormat = "{first_item}-{last_item} de {all_items}";
    private const string AllItemsText = "Todos";
    private MudTable<Mercado>? table;
    private int pagina;
    private int linhasPorPagina = 10;
    private string busca = string.Empty;

    // Método que será chamado pelo MudTable para carregar os dados do servidor.
    private async Task<TableData<Mercado>> LoadServerData(TableState state, CancellationToken token)
    {
        _loading = true; // Ativa o loading enquanto os dados estão sendo carregados.

        // Aqui você pode adicionar lógica para filtragem, ordenação e paginação.
        var resultado = await MercadoServico.ObterComPaginacao(
            busca,
            state.Page, // Página atual
            state.PageSize, // Tamanho da página
            state.SortLabel, // Ordenação (se houver)
            state.SortDirection == SortDirection.Ascending, // Direção da ordenação,
            token
        );

        _loading = false; // Desativa o loading quando os dados são carregados.

        pagina = state.Page;
        linhasPorPagina = state.PageSize;

        return new TableData<Mercado>
        {
            Items = resultado.Itens, // Lista de mercados
            TotalItems = resultado.Total // Contagem total de itens (para paginação)
        };
    }

    private void Pesquisar(string text)
    {
        busca = text;
        table!.ReloadServerData();
    }

    private async Task Excluir(int id)
    {
        await OpenDialogExclusao(id);
    }

    private async Task OpenDialogAsync(int id)
    {
        var options = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.ExtraSmall,
            CloseOnEscapeKey = false,
            BackdropClick = false
        };

        var parameters = new DialogParameters<Dialog>();
        if (id > 0)
        {
            var model = await MercadoServico.ObterPorId(id, CancellationToken.None);
            parameters.Add(x => x.Model, new MercadoViewModel()
            {
                Id = model!.Id,
                Nome = model.Nome,
                Endereco = model.Endereco
            });
        }
        
        var dialog = await DialogService.ShowAsync<Dialog>(id > 0 ? "Editar Mercado" : "Adicionar Mercado",
            parameters,
            options);
        var result = await dialog.Result;
        if (!result?.Canceled ?? true)
        {
            await table!.ReloadServerData();
        }
    }

    private async Task OpenDialogExclusao(int id)
    {
        var options = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.ExtraSmall,
            CloseOnEscapeKey = false,
            BackdropClick = false
        };

        var parameters = new DialogParameters<DialogConfirmacaoExclusao> { { x => x.Id, id } };

        var dialog = await DialogService.ShowAsync<DialogConfirmacaoExclusao>(null, parameters, options);
        var result = await dialog.Result;
        if (!result?.Canceled ?? true)
        {
            pagina = table!.CurrentPage;
            linhasPorPagina = table!.RowsPerPage;
            await table!.ReloadServerData();
        }
    }
}
